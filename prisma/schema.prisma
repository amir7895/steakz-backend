generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Updated to use environment variable for Render deployment
}

model User {
  id            Int            @id @default(autoincrement())
  username      String         @unique
  password      String
  role          Role           @default(WRITER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  createdById   Int?
  email         String?        @unique
  name          String?        // Made name field optional
  comments      Comment[]      @relation("AuthorComments")
  feedbacks     Feedback[]     @relation("UserFeedbacks")
  loyaltyPoints LoyaltyPoint[] @relation("UserLoyaltyPoints")
  orders        Order[]        @relation("UserOrders")
  posts         Post[]         @relation("UserPosts")
  reservations  Reservation[]  @relation("UserReservations")
  createdBy     User?          @relation("UserCreator", fields: [createdById], references: [id])
  createdUsers  User[]         @relation("UserCreator")
  branchId      Int?
  branch        Branch?        @relation(fields: [branchId], references: [id])
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  authorId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  author    User      @relation("UserPosts", fields: [authorId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userName  String?
  postId    Int
  authorId  Int?
  author    User?    @relation("AuthorComments", fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([authorId])
}

model MenuItem {
  id           Int      @id @default(autoincrement())
  name         String
  description  String
  price        Float
  isBestSeller Boolean  @default(false)
  isNew        Boolean  @default(false)
  imageUrl     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orders       Order[]  @relation("MenuItemToOrder")
  branchId     Int?
  branch       Branch?  @relation(fields: [branchId], references: [id])
}

model Order {
  id         Int        @id @default(autoincrement())
  customerId Int?
  type       String
  status     String
  total      Float
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  customer   User?      @relation("UserOrders", fields: [customerId], references: [id])
  items      MenuItem[] @relation("MenuItemToOrder")
  branchId   Int?
  branch     Branch?    @relation(fields: [branchId], references: [id])
}

model Inventory {
  id        Int      @id @default(autoincrement())
  itemName  String
  quantity  Int
  threshold Int
  waste     Int      @default(0)
  updatedAt DateTime @updatedAt
  branchId  Int?
  branch    Branch?  @relation(fields: [branchId], references: [id])
}

model Staff {
  id          Int           @id @default(autoincrement())
  name        String
  role        String
  attendance  Attendance[]
  performance Performance[]
  shift       Shift[]
}

model Shift {
  id        Int      @id @default(autoincrement())
  staffId   Int
  startTime DateTime
  endTime   DateTime
  staff     Staff    @relation(fields: [staffId], references: [id])
}

model Attendance {
  id      Int      @id @default(autoincrement())
  staffId Int
  date    DateTime
  present Boolean
  staff   Staff    @relation(fields: [staffId], references: [id])
}

model Performance {
  id      Int      @id @default(autoincrement())
  staffId Int
  metric  String
  value   Float
  date    DateTime
  staff   Staff    @relation(fields: [staffId], references: [id])
}

model FinancialReport {
  id       Int      @id @default(autoincrement())
  date     DateTime
  sales    Float
  expenses Float
  invoices String[]
}

model Feedback {
  id         Int      @id @default(autoincrement())
  customerId Int
  content    String
  rating     Int
  createdAt  DateTime @default(now())
  customer   User     @relation("UserFeedbacks", fields: [customerId], references: [id])
}

model LoyaltyPoint {
  id         Int      @id @default(autoincrement())
  customerId Int
  points     Int
  updatedAt  DateTime @updatedAt
  customer   User     @relation("UserLoyaltyPoints", fields: [customerId], references: [id])
}

model Reservation {
  id              Int      @id @default(autoincrement())
  customerId      Int
  reservedAt      DateTime @default(now())
  tableNumber     Int
  numberOfGuests  Int
  specialRequests String?
  customer         User?      @relation("UserReservations", fields: [customerId], references: [id])
}

model Branch {
  id       Int      @id @default(autoincrement())
  name     String
  location String
  users    User[]
  orders   Order[]
  menuItems MenuItem[]
  inventoryItems Inventory[]
}

enum Role {
  WRITER
  ADMIN
  MANAGER
  USER
  STAFF
}
